trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  rid32: 'win-x86'
  rid64: 'win-x64'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 5.0.x
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    feedsToUse: config
    nugetConfigPath: ./NuGet.config

- task: DotNetCoreCLI@2
  displayName: 'Build 32-bit'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:DefineConstants=IS_PIPELINES_BUILD -r $(rid32)'

- task: DotNetCoreCLI@2
  displayName: 'Build 64-bit'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:DefineConstants=IS_PIPELINES_BUILD -r $(rid64)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: test
    projects: 'Test/**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --runtime $(rid32) --no-build'

- task: PowerShell@2
  displayName: 'Set app version variables'
  inputs:
    filePath: 'SetAppVerVariables.ps1'

- task: DotNetCoreCLI@2
  displayName: 'Publish RVisUI 32-bit'
  inputs:
    command: publish
    publishWebProjects: False
    arguments: 'UI\RVisUI\RVisUI.csproj --configuration $(BuildConfiguration) /p:SelfContained=true -r $(rid32) --output $(Build.ArtifactStagingDirectory)/$(rid32)/RVis_v$(AppVer)'
    zipAfterPublish: False

- task: DotNetCoreCLI@2
  displayName: 'Publish RVis server 32-bit'
  inputs:
    command: publish
    publishWebProjects: False
    arguments: 'R\RVis.Server\RVis.Server.csproj --configuration $(BuildConfiguration) /p:SelfContained=true -r $(rid32) --output $(Build.ArtifactStagingDirectory)/$(rid32)/RVis_v$(AppVer)/R'
    zipAfterPublish: False

- task: DotNetCoreCLI@2
  displayName: 'Publish RVisUI 64-bit'
  inputs:
    command: publish
    publishWebProjects: False
    arguments: 'UI\RVisUI\RVisUI.csproj --configuration $(BuildConfiguration) /p:SelfContained=true -r $(rid64) --output $(Build.ArtifactStagingDirectory)/$(rid64)/RVis_v$(AppVer)'
    zipAfterPublish: False

- task: DotNetCoreCLI@2
  displayName: 'Publish RVis server 64-bit'
  inputs:
    command: publish
    publishWebProjects: False
    arguments: 'R\RVis.Server\RVis.Server.csproj --configuration $(BuildConfiguration) /p:SelfContained=true -r $(rid64) --output $(Build.ArtifactStagingDirectory)/$(rid64)/RVis_v$(AppVer)/R'
    zipAfterPublish: False

- task: BatchScript@1
  displayName: 'Publish modules'
  inputs:
    filename: 'prepare_release.bat'
    arguments: '$(AppVer) $(Build.ArtifactStagingDirectory)'

- task: ArchiveFiles@2
  displayName: 'Zip 32-bit'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/$(rid32)/RVis_v$(AppVer)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/RVis_v$(AppVer).zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: 'Zip 64-bit'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/$(rid64)/RVis_v$(AppVer)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/RVis_v$(AppVer)_x64.zip'
    replaceExistingArchive: true

- task: GitHubRelease@1
  displayName: 'Release zips on GitHub'
  inputs:
    gitHubConnection: 'GH-GMPtk-RVis'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(AppVer)'
    title: 'RVis v$(AppVer)'
    releaseNotesFilePath: 'release_notes.md'
    assets: |
      $(Build.ArtifactStagingDirectory)/RVis_v$(AppVer).zip
      $(Build.ArtifactStagingDirectory)/RVis_v$(AppVer)_x64.zip
    isPreRelease: true
    addChangeLog: false